#   FN = 0
#
#   for (i in 1: nrow(m)){
#
#     if(m$troph_status[i] == 1 & m$rounded_p[i] == 1){TP = TP +1}
#     if(m$troph_status[i] == 1 & m$rounded_p[i] == 0){FN = FN +1}
#     if(m$troph_status[i] == 0 & m$rounded_p[i] == 1){FP = FP +1}
#     if(m$troph_status[i] == 0 & m$rounded_p[i] == 0){TN = TN +1}
#
#   }
#
#   acc = (TP+TN)/(TP+FP+FN+TN)
#   prec = TP/(TP+FP)
#   rec = TP/(TP+FN)
#
#   F1_score = 2*(prec*rec)/(prec+rec) # Maximizing the F1 score looks to limit both false positives and false negatives as much as possible.
#
#   res$TP[f] = TP
#   res$TN[f] = TN
#   res$FP[f] = FP
#   res$FN[f] = FN
#   res$Acc[f] = acc
#   res$prec[f] = prec
#   res$rec[f] = rec
#   res$F1[f] = F1_score
#
#   }
#
# write.csv(res, "/media/meurvill/Elements/re-do_V2/02_BNN/run_5_5/models_stats/stats_models.csv")
#
# av_acc = mean(res$Acc)
# Stats final model
#pred = read.table("/media/meurvill/Elements/re-do_V2/02_BNN/run_5_5/final_model_v2/all_data_BNN_Full_p1_h0_l5_5_s1_binf_1234_pred_mean_pr.txt", header = F)
pred = read.table("/media/meurvill/Elements/re-do_V2/02_BNN/run_5_5/final_model_v2/all_data_BNN_Full_p0_h0_l5_5_s1_b1_1234_pred_mean_pr.txt", header = F)
# Stats final model
pred = read.table("/media/meurvill/Elements/re-do_V2/02_BNN/run_5_5/final_model_v2/all_data_BNN_Full_p1_h0_l5_5_s1_binf_1234_pred_mean_pr.txt", header = F)
data = read.table("/media/meurvill/Elements/re-do_V2/02_BNN/input/labels_train.txt", header = T)
colnames(pred) = c("species", "NoT", "T" )
m = merge(data, pred, by = "species", all.y = T)
m$rounded_p = round(m$T)
TP = 0
FP = 0
TN = 0
FN = 0
for (i in 1: nrow(m)){
if(m$troph_status[i] == 1 & m$rounded_p[i] == 1){TP = TP +1}
if(m$troph_status[i] == 1 & m$rounded_p[i] == 0){FN = FN +1}
if(m$troph_status[i] == 0 & m$rounded_p[i] == 1){FP = FP +1}
if(m$troph_status[i] == 0 & m$rounded_p[i] == 0){TN = TN +1}
}
acc = (TP+TN)/(TP+FP+FN+TN)
prec = TP/(TP+FP)
rec = TP/(TP+FN)
F1_score = 2*(prec*rec)/(prec+rec) # Maximizing the F1 score looks to limit both false positives and false negatives as much as possible.
experts = read.csv("/media/meurvill/Elements/re-do_V2/00_dataset_production/input/papers_MA_data_predicted.csv")
experts = experts[, 1:11]
library(dplyr)
library(stringr)
experts = experts %>%
filter(!grepl('\\*', Riou.Mizuno))
experts$valid_species = gsub(" ", ".", experts$valid_species)
experts$valid_species = str_to_title(experts$valid_species)
experts = experts[rowSums(is.na(experts)) < 10, ]
# Get predictions
data = read.table("/media/meurvill/Elements/re-do_V2/02_BNN/run_5_5/final_model_v2/prediction_feature_BNN_Full_p0_h0_l5_5_s1_b1_1234_pred_mean_pr.txt", header = F )
# Get predictions
data = read.table("/media/meurvill/Elements/re-do_V2/02_BNN/run_5_5/final_model_v2/prediction_feature_BNN_Full_p1_h0_l5_5_s1_binf_1234_pred_mean_pr.txt", header = F )
colnames(data) = c("species", "NoT", "T" )
data$expert = NA
for(i in 1:nrow(experts)){
for (j in 2:ncol(experts)){
if(!is.na(experts[i, j]) && experts[i, j] == 1){data$expert[data$species == experts$valid_species[i]] = 1}
if(!is.na(experts[i, j]) && experts[i, j] == 0){data$expert[data$species == experts$valid_species[i]] = 0}
}
}
data$rounded = round(data$T)
TP = 0
FP = 0
TN = 0
FN = 0
for (i in 1: nrow(data)){
if(data$expert[i] == 1 & data$rounded[i] == 1 & !is.na(data$expert[i])){TP = TP +1}
if(data$expert[i] == 1 & data$rounded[i] == 0 & !is.na(data$expert[i])){FN = FN +1}
if(data$expert[i] == 0 & data$rounded[i] == 1 & !is.na(data$expert[i])){FP = FP +1}
if(data$expert[i] == 0 & data$rounded[i] == 0 & !is.na(data$expert[i])){TN = TN +1}
}
acc = (TP+TN)/(TP+FP+FN+TN)
prec = TP/(TP+FP)
rec = TP/(TP+FN)
F1_score = 2*(prec*rec)/(prec+rec) # Maximizing the F1 score looks to limit both false positives and false negatives as much as possible.
data = read.csv("/media/meurvill/Elements/re-do_V2/00_dataset_production/input/SI_FILE1.csv", sep = ",")
# Keep columns of interest
colnames(data)
data = data[, 1:9]
data$species = gsub (pattern = "_", replacement = "\\.", data$species)
data$species[data$species == "Cerapachys.biroi"] = "Ooceraea.biroi"
data$species[data$species == "Aphaenogaster.cockerelli"] = "Novomessor.cockerelli"
# Merge with eigenvalues
eigen = read.csv("/media/meurvill/Elements/re-do_V2/00_dataset_production/output/eigentobind_50percent_417.csv")
eigen$species = gsub(pattern = " ", replacement = "\\.", x = eigen$species)
eigen$species = gsub(pattern = "_", replacement = "\\.", x = eigen$species)
eigen = eigen[, 2:13]
data = merge(data, eigen, by = "species", all.x = T)
# Match manually the three synonym species
data[data$species == "Dinoponera.grandis", 10:20] = eigen[eigen$species == "Dinoponera.australis", 2:12]
data = read.csv("/media/meurvill/Elements/re-do_V2/00_dataset_production/input/SI_FILE1.csv", sep = ",")
# Keep columns of interest
colnames(data)
data = data[, 1:9]
data$species = gsub (pattern = "_", replacement = "\\.", data$species)
data$species[data$species == "Cerapachys.biroi"] = "Ooceraea.biroi"
data$species[data$species == "Aphaenogaster.cockerelli"] = "Novomessor.cockerelli"
# Merge with eigenvalues
eigen = read.csv("/media/meurvill/Elements/re-do_V2/00_dataset_production/output/eigentobind_50percent_417.csv")
eigen$species = gsub(pattern = " ", replacement = "\\.", x = eigen$species)
eigen$species = gsub(pattern = "_", replacement = "\\.", x = eigen$species)
eigen = eigen[, 2:13]
data = merge(data, eigen, by = "species", all.x = T)
# Match manually the three synonym species
data[data$species == "Dinoponera.grandis", 10:20] = eigen[eigen$species == "Dinoponera.australis", 2:12]
data = read.csv("/media/meurvill/Elements/re-do_V2/00_dataset_production/input/SI_FILE1.csv", sep = ",")
# Keep columns of interest
colnames(data)
data = data[, 1:9]
data$species = gsub (pattern = "_", replacement = "\\.", data$species)
data$species[data$species == "Cerapachys.biroi"] = "Ooceraea.biroi"
data$species[data$species == "Aphaenogaster.cockerelli"] = "Novomessor.cockerelli"
# Merge with eigenvalues
eigen = read.csv("/media/meurvill/Elements/re-do_V2/00_dataset_production/output/eigentobind_50percent_417.csv")
eigen$species = gsub(pattern = " ", replacement = "\\.", x = eigen$species)
eigen$species = gsub(pattern = "_", replacement = "\\.", x = eigen$species)
eigen = eigen[, 2:13]
data = merge(data, eigen, by = "species", all.x = T)
data[data$species == "Dinoponera.grandis", 10:20] = eigen[eigen$species == "Dinoponera.australis", 2:12]
data[data$species == "Dinoponera.grandis", 10:20] = eigen[eigen$species == "Dinoponera.australis", 2:12]
View(data)
View(eigen)
View(data)
data[data$species == "Dinoponera.grandis", 10:20] = eigen[eigen$species == "Dinoponera.australis", 2:12]
data[data$species == "Ooceraea.biroi", 10:20] = eigen[eigen$species == "Cerapachys.biroi", 2:12]
data[data$species == "Novomessor.cockerelli", 10:20] = eigen[eigen$species == "Aphaenogaster.cockerelli", 2:12]
# Colony size into tertiles
vTert = quantile(data$size_max, c(0:3/3)) # Not convinced, it would be 0-2800, 2800-5000 and >5000. 2800 is not small.
data$colonySize = NA
for(i in 1:nrow(data)){
if(data$size_max[i] <= 279){data$colonySize[i] = "S"}
if(data$size_max[i] > 279 & data$size_max[i] <= 4999){data$colonySize[i] = "M"}
if(data$size_max[i] > 4999){data$colonySize[i] = "L"}
}
for(i in 1:nrow(data)){
if(data$colonySize[i] == "S"){data$colonySize[i] = 0}
if(data$colonySize[i] == "M"){data$colonySize[i] = 1}
if(data$colonySize[i] == "L"){data$colonySize[i] = 2}
}
data$colonySize = as.numeric(data$colonySize)
min_max = read.csv("/media/meurvill/Elements/re-do_V2/00_dataset_production/output/min_max.csv")
data = merge(data, min_max, by = "species", all.x = T)
data = data [, c(1:21, 23:26)]
data[, 10:20] = data[, 10:20] * 100/3
features = data[!is.na(data$troph_status), c(1, 3, 6, 8, 10:25)] # 165. Adapt columns to depend on the the D-test results.
features = features[!is.na(features$max_hum),]
# Rescaling to have data in the same range (-1 _ 2)
min(features$min_hum)
max(features$min_hum)
features$min_hum = features$min_hum/3300
min(features$max_hum)
max(features$max_hum)
features$max_hum = features$max_hum/8800
min(features$min_temp)
max(features$min_temp)
features$min_temp = features$min_temp/26
min(features$max_temp)
max(features$max_temp)
features$max_temp = features$max_temp/30
prediction = data[is.na(data$troph_status),  c(1, 3, 6, 8, 10:25)] # 252. Adapt columns to keep depending on the results of the D-test. Replace gam by spermatheca, because only gamergates are correlated, not repro or sterile.
prediction = prediction[!is.na(prediction$max_hum),]
labels = data[!is.na(data$troph_status), c(1, 9)]
labels = labels[!labels$species == "Myrmicaria.natalensis.eumenoides",]
labels = labels[!labels$species == "Myrmoteras.jaitrongi",]
write.table(features, "/media/meurvill/Elements/re-do_V2/02_BNN/input/features_train.txt", row.names = FALSE, sep = "\t", quote = F)
write.table(prediction, "/media/meurvill/Elements/re-do_V2/02_BNN/input/prediction_feature.txt", row.names = FALSE, sep = "\t", quote = F)
write.table(labels, "/media/meurvill/Elements/re-do_V2/02_BNN/input/labels_train.txt", row.names = FALSE, sep = "\t", quote = F)
View(features)
# Get predictions
data = read.table("/media/meurvill/Elements/re-do_V2/02_BNN/run_5_5/final_model_v2/prediction_feature_BNN_Full_p1_h0_l5_5_s1_binf_1234_pred_mean_pr.txt", header = F )
colnames(data) = c("species", "NoT", "T" )
data$expert = NA
for(i in 1:nrow(experts)){
for (j in 2:ncol(experts)){
if(!is.na(experts[i, j]) && experts[i, j] == 1){data$expert[data$species == experts$valid_species[i]] = 1}
if(!is.na(experts[i, j]) && experts[i, j] == 0){data$expert[data$species == experts$valid_species[i]] = 0}
}
}
data$rounded = round(data$T)
TP = 0
FP = 0
TN = 0
FN = 0
for (i in 1: nrow(data)){
if(data$expert[i] == 1 & data$rounded[i] == 1 & !is.na(data$expert[i])){TP = TP +1}
if(data$expert[i] == 1 & data$rounded[i] == 0 & !is.na(data$expert[i])){FN = FN +1}
if(data$expert[i] == 0 & data$rounded[i] == 1 & !is.na(data$expert[i])){FP = FP +1}
if(data$expert[i] == 0 & data$rounded[i] == 0 & !is.na(data$expert[i])){TN = TN +1}
}
acc = (TP+TN)/(TP+FP+FN+TN)
# Get predictions
data = read.table("/media/meurvill/Elements/re-do_V2/02_BNN/run_5_5/final_model_v2/prediction_feature_BNN_Full_p1_h0_l5_5_s1_binf_1234_pred_mean_pr.txt", header = F )
# Stats final model
pred = read.table("/media/meurvill/Elements/re-do_V2/02_BNN/run_5_5/final_model_v2/all_data_BNN_Full_p1_h0_l5_5_s1_binf_1234_pred_mean_pr.txt", header = F)
data = read.table("/media/meurvill/Elements/re-do_V2/02_BNN/input/labels_train.txt", header = T)
colnames(pred) = c("species", "NoT", "T" )
m = merge(data, pred, by = "species", all.y = T)
m$rounded_p = round(m$T)
TP = 0
FP = 0
TN = 0
FN = 0
for (i in 1: nrow(m)){
if(m$troph_status[i] == 1 & m$rounded_p[i] == 1){TP = TP +1}
if(m$troph_status[i] == 1 & m$rounded_p[i] == 0){FN = FN +1}
if(m$troph_status[i] == 0 & m$rounded_p[i] == 1){FP = FP +1}
if(m$troph_status[i] == 0 & m$rounded_p[i] == 0){TN = TN +1}
}
acc = (TP+TN)/(TP+FP+FN+TN)
prec = TP/(TP+FP)
rec = TP/(TP+FN)
F1_score = 2*(prec*rec)/(prec+rec) # Maximizing the F1 score looks to limit both false positives and false negatives as much as possible.
experts = read.csv("/media/meurvill/Elements/re-do_V2/00_dataset_production/input/papers_MA_data_predicted.csv")
experts = experts[, 1:11]
library(dplyr)
library(stringr)
experts = experts %>%
filter(!grepl('\\*', Riou.Mizuno))
experts$valid_species = gsub(" ", ".", experts$valid_species)
experts$valid_species = str_to_title(experts$valid_species)
experts = experts[rowSums(is.na(experts)) < 10, ]
# Get predictions
data = read.table("/media/meurvill/Elements/re-do_V2/02_BNN/run_5_5/final_model_v2/prediction_feature_BNN_Full_p1_h0_l5_5_s1_binf_1234_pred_mean_pr.txt", header = F )
colnames(data) = c("species", "NoT", "T" )
data$expert = NA
for(i in 1:nrow(experts)){
for (j in 2:ncol(experts)){
if(!is.na(experts[i, j]) && experts[i, j] == 1){data$expert[data$species == experts$valid_species[i]] = 1}
if(!is.na(experts[i, j]) && experts[i, j] == 0){data$expert[data$species == experts$valid_species[i]] = 0}
}
}
data$rounded = round(data$T)
TP = 0
FP = 0
TN = 0
FN = 0
for (i in 1: nrow(data)){
if(data$expert[i] == 1 & data$rounded[i] == 1 & !is.na(data$expert[i])){TP = TP +1}
if(data$expert[i] == 1 & data$rounded[i] == 0 & !is.na(data$expert[i])){FN = FN +1}
if(data$expert[i] == 0 & data$rounded[i] == 1 & !is.na(data$expert[i])){FP = FP +1}
if(data$expert[i] == 0 & data$rounded[i] == 0 & !is.na(data$expert[i])){TN = TN +1}
}
acc = (TP+TN)/(TP+FP+FN+TN)
prec = TP/(TP+FP)
rec = TP/(TP+FN)
F1_score = 2*(prec*rec)/(prec+rec) # Maximizing the F1 score looks to limit both false positives and false negatives as much as possible.
View(data)
data = read.csv("/media/meurvill/Elements/re-do_V2/00_dataset_production/input/SI_FILE1.csv", sep = ",")
# Keep columns of interest
colnames(data)
data = data[, 1:9]
data$species = gsub (pattern = "_", replacement = "\\.", data$species)
data$species[data$species == "Cerapachys.biroi"] = "Ooceraea.biroi"
data$species[data$species == "Aphaenogaster.cockerelli"] = "Novomessor.cockerelli"
# Merge with eigenvalues
eigen = read.csv("/media/meurvill/Elements/re-do_V2/00_dataset_production/output/eigentobind_50percent_417.csv")
eigen$species = gsub(pattern = " ", replacement = "\\.", x = eigen$species)
eigen$species = gsub(pattern = "_", replacement = "\\.", x = eigen$species)
eigen = eigen[, 2:13]
data = merge(data, eigen, by = "species", all.x = T)
# Match manually the three synonym species
data[data$species == "Dinoponera.grandis", 10:20] = eigen[eigen$species == "Dinoponera.australis", 2:12]
data = read.csv("/media/meurvill/Elements/re-do_V2/00_dataset_production/input/SI_FILE1.csv", sep = ",")
# Keep columns of interest
colnames(data)
data = data[, 1:9]
data$species = gsub (pattern = "_", replacement = "\\.", data$species)
data$species[data$species == "Cerapachys.biroi"] = "Ooceraea.biroi"
data$species[data$species == "Aphaenogaster.cockerelli"] = "Novomessor.cockerelli"
# Merge with eigenvalues
eigen = read.csv("/media/meurvill/Elements/re-do_V2/00_dataset_production/output/eigentobind_50percent_417.csv")
eigen$species = gsub(pattern = " ", replacement = "\\.", x = eigen$species)
eigen$species = gsub(pattern = "_", replacement = "\\.", x = eigen$species)
eigen = eigen[, 2:13]
data = merge(data, eigen, by = "species", all.x = T)
data[data$species == "Dinoponera.grandis", 10:20] = eigen[eigen$species == "Dinoponera.australis", 2:12]
#data[data$species == "Dinoponera.grandis", 10:20] = eigen[eigen$species == "Dinoponera.australis", 2:12]
data[data$species == "Ooceraea.biroi", 10:20] = eigen[eigen$species == "Cerapachys.biroi", 2:12]
#data[data$species == "Dinoponera.grandis", 10:20] = eigen[eigen$species == "Dinoponera.australis", 2:12]
#data[data$species == "Ooceraea.biroi", 10:20] = eigen[eigen$species == "Cerapachys.biroi", 2:12]
data[data$species == "Novomessor.cockerelli", 10:20] = eigen[eigen$species == "Aphaenogaster.cockerelli", 2:12]
# Colony size into tertiles
vTert = quantile(data$size_max, c(0:3/3)) # Not convinced, it would be 0-2800, 2800-5000 and >5000. 2800 is not small.
data$colonySize = NA
for(i in 1:nrow(data)){
if(data$size_max[i] <= 279){data$colonySize[i] = "S"}
if(data$size_max[i] > 279 & data$size_max[i] <= 4999){data$colonySize[i] = "M"}
if(data$size_max[i] > 4999){data$colonySize[i] = "L"}
}
for(i in 1:nrow(data)){
if(data$colonySize[i] == "S"){data$colonySize[i] = 0}
if(data$colonySize[i] == "M"){data$colonySize[i] = 1}
if(data$colonySize[i] == "L"){data$colonySize[i] = 2}
}
data$colonySize = as.numeric(data$colonySize)
min_max = read.csv("/media/meurvill/Elements/re-do_V2/00_dataset_production/output/min_max.csv")
data = merge(data, min_max, by = "species", all.x = T)
data = data [, c(1:21, 23:26)]
data[, 10:20] = data[, 10:20] * 100/3
features = data[!is.na(data$troph_status), c(1, 3, 6, 8, 10:25)] # 165. Adapt columns to depend on the the D-test results.
features = features[!is.na(features$max_hum),]
features
View(features)
# Rescaling to have data in the same range (-1 _ 2)
min(features$min_hum)
max(features$min_hum)
features$min_hum = features$min_hum/3300
min(features$max_hum)
max(features$max_hum)
features$max_hum = features$max_hum/8800
min(features$min_temp)
max(features$min_temp)
features$min_temp = features$min_temp/26
min(features$max_temp)
max(features$max_temp)
features$max_temp = features$max_temp/30
data = read.csv("/media/meurvill/Elements/re-do_V2/00_dataset_production/input/SI_FILE1.csv", sep = ",")
# Keep columns of interest
colnames(data)
data = data[, 1:9]
data$species = gsub (pattern = "_", replacement = "\\.", data$species)
data$species[data$species == "Cerapachys.biroi"] = "Ooceraea.biroi"
data$species[data$species == "Aphaenogaster.cockerelli"] = "Novomessor.cockerelli"
# Merge with eigenvalues
eigen = read.csv("/media/meurvill/Elements/re-do_V2/00_dataset_production/output/eigentobind_50percent_417.csv")
eigen$species = gsub(pattern = " ", replacement = "\\.", x = eigen$species)
eigen$species = gsub(pattern = "_", replacement = "\\.", x = eigen$species)
eigen = eigen[, 2:13]
data = merge(data, eigen, by = "species", all.x = T)
# Match manually the three synonym species
#data[data$species == "Dinoponera.grandis", 10:20] = eigen[eigen$species == "Dinoponera.australis", 2:12]
#data[data$species == "Ooceraea.biroi", 10:20] = eigen[eigen$species == "Cerapachys.biroi", 2:12]
data[data$species == "Novomessor.cockerelli", 10:20] = eigen[eigen$species == "Aphaenogaster.cockerelli", 2:12]
# Colony size into tertiles
vTert = quantile(data$size_max, c(0:3/3)) # Not convinced, it would be 0-2800, 2800-5000 and >5000. 2800 is not small.
data$colonySize = NA
for(i in 1:nrow(data)){
if(data$size_max[i] <= 279){data$colonySize[i] = "S"}
if(data$size_max[i] > 279 & data$size_max[i] <= 4999){data$colonySize[i] = "M"}
if(data$size_max[i] > 4999){data$colonySize[i] = "L"}
}
# Build BNN training /prediction set
for(i in 1:nrow(data)){
if(data$colonySize[i] == "S"){data$colonySize[i] = 0}
if(data$colonySize[i] == "M"){data$colonySize[i] = 1}
if(data$colonySize[i] == "L"){data$colonySize[i] = 2}
}
data$colonySize = as.numeric(data$colonySize)
# Include min et max temp et hum
min_max = read.csv("/media/meurvill/Elements/re-do_V2/00_dataset_production/output/min_max.csv")
data = merge(data, min_max, by = "species", all.x = T)
data = data [, c(1:21, 23:26)]
data[, 10:20] = data[, 10:20] * 100/3
# Rescaling to have data in the same range (-1 _ 2)
min(data$min_hum)
max(data$min_hum)
data$min_hum = data$min_hum/3300
min(data$max_hum)
max(data$max_hum)
data$max_hum = data$max_hum/8800
min(data$min_temp)
max(data$min_temp)
data$min_temp = data$min_temp/26
min(data$max_temp)
max(data$max_temp)
data$max_temp = data$max_temp/30
View(data)
data = read.csv("/media/meurvill/Elements/re-do_V2/00_dataset_production/input/SI_FILE1.csv", sep = ",")
# Keep columns of interest
colnames(data)
data = data[, 1:9]
# Keep columns of interest
colnames(data)
data$species = gsub (pattern = "_", replacement = "\\.", data$species)
data$species[data$species == "Cerapachys.biroi"] = "Ooceraea.biroi"
data$species[data$species == "Aphaenogaster.cockerelli"] = "Novomessor.cockerelli"
# Merge with eigenvalues
eigen = read.csv("/media/meurvill/Elements/re-do_V2/00_dataset_production/output/eigentobind_50percent_417.csv")
eigen$species = gsub(pattern = " ", replacement = "\\.", x = eigen$species)
eigen$species = gsub(pattern = "_", replacement = "\\.", x = eigen$species)
eigen = eigen[, 2:13]
data = merge(data, eigen, by = "species", all.x = T)
View(data)
#data[data$species == "Dinoponera.grandis", 10:20] = eigen[eigen$species == "Dinoponera.australis", 2:12]
#data[data$species == "Ooceraea.biroi", 10:20] = eigen[eigen$species == "Cerapachys.biroi", 2:12]
data[data$species == "Novomessor.cockerelli", 10:20] = eigen[eigen$species == "Aphaenogaster.cockerelli", 2:12]
# Colony size into tertiles
vTert = quantile(data$size_max, c(0:3/3)) # Not convinced, it would be 0-2800, 2800-5000 and >5000. 2800 is not small.
data$colonySize = NA
for(i in 1:nrow(data)){
if(data$size_max[i] <= 279){data$colonySize[i] = "S"}
if(data$size_max[i] > 279 & data$size_max[i] <= 4999){data$colonySize[i] = "M"}
if(data$size_max[i] > 4999){data$colonySize[i] = "L"}
}
for(i in 1:nrow(data)){
if(data$colonySize[i] == "S"){data$colonySize[i] = 0}
if(data$colonySize[i] == "M"){data$colonySize[i] = 1}
if(data$colonySize[i] == "L"){data$colonySize[i] = 2}
}
data$colonySize = as.numeric(data$colonySize)
min_max = read.csv("/media/meurvill/Elements/re-do_V2/00_dataset_production/output/min_max.csv")
data = merge(data, min_max, by = "species", all.x = T)
colnames(data)
data = data [, c(1:21, 23:26)]
colnames(data)
data[, 10:20] = data[, 10:20] * 100/3 # Scale phylogeny
# Rescaling to have data in the same range (-1 _ 2)
min(data$min_hum)
# Rescaling to have data in the same range (-1 _ 2)
data$min_hum = as.numeric(data$min_hum)
min(data$min_hum)
# Rescaling to have data in the same range (-1 _ 2)
min(data$min_hum, na.rm = T)
max(data$min_hum, na.rm = T)
data$min_hum = data$min_hum/3300
min(data$max_hum, na.rm = T)
max(data$max_hum, na.rm = T)
data$max_hum = data$max_hum/8800
min(data$min_temp)
min(data$min_temp, na.rm = T)
max(data$min_temp, na.rm = T)
data$min_temp = data$min_temp/26
min(data$max_temp, n.rm = T)
max(data$max_temp, na.rm =T)
min(data$max_temp, na.rm = T)
max(data$max_temp, na.rm =T)
data$max_temp = data$max_temp/30
features = data[!is.na(data$troph_status), c(1, 3, 6, 8, 10:25)] # 165. Adapt columns to depend on the the D-test results.
features = features[!is.na(features$max_hum),]
prediction = data[is.na(data$troph_status),  c(1, 3, 6, 8, 10:25)] # 252. Adapt columns to keep depending on the results of the D-test. Replace gam by spermatheca, because only gamergates are correlated, not repro or sterile.
prediction = prediction[!is.na(prediction$max_hum),]
labels = data[!is.na(data$troph_status), c(1, 9)]
labels = labels[!labels$species == "Myrmicaria.natalensis.eumenoides",]
labels = labels[!labels$species == "Myrmoteras.jaitrongi",]
write.table(features, "/media/meurvill/Elements/re-do_V2/02_BNN/input/features_train.txt", row.names = FALSE, sep = "\t", quote = F)
write.table(prediction, "/media/meurvill/Elements/re-do_V2/02_BNN/input/prediction_feature.txt", row.names = FALSE, sep = "\t", quote = F)
write.table(labels, "/media/meurvill/Elements/re-do_V2/02_BNN/input/labels_train.txt", row.names = FALSE, sep = "\t", quote = F)
# Stats final model
pred = read.table("/media/meurvill/Elements/re-do_V2/02_BNN/run_5_5/final_model_v2/all_data_BNN_Full_p1_h0_l5_5_s1_binf_1234_pred_mean_pr.txt", header = F)
data = read.table("/media/meurvill/Elements/re-do_V2/02_BNN/input/labels_train.txt", header = T)
colnames(pred) = c("species", "NoT", "T" )
m = merge(data, pred, by = "species", all.y = T)
m$rounded_p = round(m$T)
# Stats final model
pred = read.table("/media/meurvill/Elements/re-do_V2/02_BNN/run_5_5/final_model_v2/all_data_BNN_Full_p1_h0_l5_5_s1_binf_1234_pred_mean_pr.txt", header = F)
data = read.table("/media/meurvill/Elements/re-do_V2/02_BNN/input/labels_train.txt", header = T)
colnames(pred) = c("species", "NoT", "T" )
m = merge(data, pred, by = "species", all.y = T)
m$rounded_p = round(m$T)
TP = 0
FP = 0
TN = 0
FN = 0
for (i in 1: nrow(m)){
if(m$troph_status[i] == 1 & m$rounded_p[i] == 1){TP = TP +1}
if(m$troph_status[i] == 1 & m$rounded_p[i] == 0){FN = FN +1}
if(m$troph_status[i] == 0 & m$rounded_p[i] == 1){FP = FP +1}
if(m$troph_status[i] == 0 & m$rounded_p[i] == 0){TN = TN +1}
}
acc = (TP+TN)/(TP+FP+FN+TN)
prec = TP/(TP+FP)
rec = TP/(TP+FN)
F1_score = 2*(prec*rec)/(prec+rec) # Maximizing the F1 score looks to limit both false positives and false negatives as much as possible.
experts = read.csv("/media/meurvill/Elements/re-do_V2/00_dataset_production/input/papers_MA_data_predicted.csv")
experts = experts[, 1:11]
library(dplyr)
library(stringr)
experts = experts %>%
filter(!grepl('\\*', Riou.Mizuno))
experts$valid_species = gsub(" ", ".", experts$valid_species)
experts$valid_species = str_to_title(experts$valid_species)
experts = experts[rowSums(is.na(experts)) < 10, ]
# Get predictions
data = read.table("/media/meurvill/Elements/re-do_V2/02_BNN/run_5_5/final_model_v2/prediction_feature_BNN_Full_p1_h0_l5_5_s1_binf_1234_pred_mean_pr.txt", header = F )
colnames(data) = c("species", "NoT", "T" )
data$expert = NA
for(i in 1:nrow(experts)){
for (j in 2:ncol(experts)){
if(!is.na(experts[i, j]) && experts[i, j] == 1){data$expert[data$species == experts$valid_species[i]] = 1}
if(!is.na(experts[i, j]) && experts[i, j] == 0){data$expert[data$species == experts$valid_species[i]] = 0}
}
}
data$rounded = round(data$T)
TP = 0
FP = 0
TN = 0
FN = 0
for (i in 1: nrow(data)){
if(data$expert[i] == 1 & data$rounded[i] == 1 & !is.na(data$expert[i])){TP = TP +1}
if(data$expert[i] == 1 & data$rounded[i] == 0 & !is.na(data$expert[i])){FN = FN +1}
if(data$expert[i] == 0 & data$rounded[i] == 1 & !is.na(data$expert[i])){FP = FP +1}
if(data$expert[i] == 0 & data$rounded[i] == 0 & !is.na(data$expert[i])){TN = TN +1}
}
acc = (TP+TN)/(TP+FP+FN+TN)
prec = TP/(TP+FP)
rec = TP/(TP+FN)
F1_score = 2*(prec*rec)/(prec+rec) # Maximizing the F1 score looks to limit both false positives and false negatives as much as possible.
